import java.math.BigInteger;

/**
 * 
 * @author djash
 * 
 * 
 *         Each new term in the Fibonacci sequence is generated by adding the
 *         previous two terms. By starting with 1 and 2, the first 10 terms will
 *         be:
 * 
 *         1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * 
 *         By considering the terms in the Fibonacci sequence whose values do
 *         not exceed four million, find the sum of the even-valued terms.
 */

public class EvenFibonacci
{

  public EvenFibonacci ()
  {
    // TODO Auto-generated constructor stub
  }



  /**
   * @param args
   */
  public static void main (String[] args)
  {
    // TODO Auto-generated method stub

  }



  public BigInteger fibonacciSum (long value)
  {
    long firstTerm = 1L;
    long secondTerm = 2L;
    BigInteger sum = BigInteger.valueOf (secondTerm);
    
    long limit = value + 1L;
    long currentTerm = firstTerm + secondTerm;
    
    while (currentTerm <= limit) {
      if (currentTerm % 2 == 0) {
        sum = sum.add (BigInteger.valueOf(currentTerm));
      }
      
      firstTerm = secondTerm;
      secondTerm = currentTerm;
      
      currentTerm = firstTerm + secondTerm;
      
    }
    
    return sum;
  }

}
